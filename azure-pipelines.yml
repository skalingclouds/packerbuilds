
pool:
  vmImage: 'ubuntu-latest'

jobs:
- job:
timeoutInMinutes: 600
cancelTimeoutInMinutes: 180
variables:
- group: Secured Image Generation Variables
- group: Non Secured Image Generation Variables

steps:
- task: PowerShell@2
  displayName: 'Download custom repository'
  condition: and(ne(variables['CUSTOM_REPOSITORY_URL'], ''), ne(variables['CUSTOM_REPOSITORY_BRANCH'], ''))
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Clean up default repository"
      Remove-Item -path './*' -Recurse -Force
      Write-Host "Download $(CUSTOM_REPOSITORY_BRANCH) branch from $(CUSTOM_REPOSITORY_URL)"
      $env:GIT_REDIRECT_STDERR = '2>&1'
      git clone $(CUSTOM_REPOSITORY_URL) . -b $(CUSTOM_REPOSITORY_BRANCH) --single-branch --depth 1
- task: PowerShell@2
  displayName: 'Build VM'
  inputs:
    targetType: filePath
    filePath: ./images.CI/build-image.ps1
    arguments: -ResourcesNamePrefix $(Build.BuildId) `
                      -ClientId $(CLIENTID) `
                      -ClientSecret $(CLIENTSECRET) `
                      -Image $(IMAGE_TYPE) `
                      -ResourceGroup $(AZURE_RESOURCE_GROUP) `
                      -StorageAccount $(AZURE_STORAGE_ACCOUNT) `
                      -SubscriptionId $(AZURE_SUBSCRIPTION) `
                      -TenantId $(AZURE_TENANT) `
                      -Location $(AZURE_LOCATION) `
                      -VirtualNetworkName $(BUILD_AGENT_VNET_NAME) `
                      -VirtualNetworkRG $(BUILD_AGENT_VNET_RESOURCE_GROUP) `
                      -VirtualNetworkSubnet $(BUILD_AGENT_SUBNET_NAME) `
                      -GitHubFeedToken $(GITHUB_TOKEN)

- task: PowerShell@2
  displayName: 'Create release for VM deployment'
  inputs:
    targetType: filePath
    filePath: ./images.CI/create-release.ps1
    arguments: -BuildId $(Build.BuildId) `
                      -Organization $(RELEASE_TARGET_ORGANIZATION) `
                      -DefinitionId $(RELEASE_TARGET_DEFINITION_ID) `
                      -Project $(RELEASE_TARGET_PROJECT) `
                      -ImageName $(IMAGE_TYPE) `
                      -AccessToken $(RELEASETARGETTOKEN)

- task: PowerShell@2
  displayName: 'Clean up resources'
  condition: always()
  inputs:
    targetType: filePath
    filePath: ./images.CI/cleanup.ps1
    arguments: -ResourcesNamePrefix $(Build.BuildId) `
                   -ClientId $(CLIENTID) `
                   -ClientSecret $(CLIENTSECRET) `
                   -Image $(IMAGE_TYPE) `
                   -SubscriptionId $(AZURE_SUBSCRIPTION) `
                   -TenantId $(AZURE_TENANT)