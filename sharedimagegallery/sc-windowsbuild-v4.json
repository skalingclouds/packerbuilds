{
    "variables": {
        "client_id": "",
        "client_secret": "",
        "tenant_id": "",
        "subscription_id": "",
        "WorkingDirectory": "{{env `System_DefaultWorkingDirectory`}}" 
      },


"builders": [
    {
        "type": "azure-arm",
        "client_id": "{{user `client_id`}}",
        "client_secret": "{{user `client_secret`}}",
        "tenant_id": "{{user `tenant_id`}}",
        "subscription_id": "{{user `subscription_id`}}",
        "shared_image_gallery_destination": 
        {
            "resource_group": "sc-imagebakery-01",
            "gallery_name": "imagebakery01",
            "image_name": "windows",
            "image_version": "1.0.0",
            "replication_regions": ["west us", "east us"]
        },
        "managed_image_resource_group_name": "sc-imagebakery-01",
        "managed_image_name": "scwinimage",
        "os_type": "Windows",
        "image_publisher": "MicrosoftWindowsServer",
        "image_offer": "WindowsServer",
        "image_sku": "2019-Datacenter",
        "communicator": "winrm",
        "winrm_use_ssl": true,
        "winrm_insecure": true,
        "winrm_timeout": "30m",
        "winrm_username": "packer",
        "location": "West US 2",
        "vm_size": "Standard_D16s_v3"
  }
],

"provisioners": [{
    "type": "powershell",
      "inline": [
        "Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))",
        "Set-MpPreference -DisableRealtimeMonitoring $false",
        "Get-ScheduledTask -TaskName ServerManager | Disable-ScheduledTask -Verbose",
        "choco install git.install -y",
        " # NOTE: the following *3* lines are only needed if the you have installed the Guest Agent.",
        "  while ((Get-Service RdAgent).Status -ne 'Running') { Start-Sleep -s 5 }",
        "  while ((Get-Service WindowsAzureTelemetryService).Status -ne 'Running') { Start-Sleep -s 5 }",
        "  while ((Get-Service WindowsAzureGuestAgent).Status -ne 'Running') { Start-Sleep -s 5 }",
        "if( Test-Path $Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml ){ rm $Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml -Force}",
        "& $env:SystemRoot\\System32\\Sysprep\\Sysprep.exe /oobe /generalize /quiet /quit",
        "while($true) { $imageState = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }"
    ]
  }]
}
